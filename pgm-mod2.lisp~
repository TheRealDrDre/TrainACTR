;;; -------------------------------------------------------------- ;;;
;;; UTILITIES
;;; -------------------------------------------------------------- ;;;

(defun seq (start end &optional (step 1))
  "Creates a ranges"
  (let ((results nil)
	(partial start))
    (cond ((and (< start end)
		(plusp step))
	   (loop while (< partial end) do
	     (push partial results)
	     (incf partial step)))
	  ((and (> start end)
		(minusp step))
	   (loop while (> partial end) do
	     (push partial results)
	     (incf partial step)))
	  (t
	   nil))
    (reverse results)))
	  

(defun pick (lst)
  "Picks up an element from a list"
  (when  (listp lst)
    (elt lst (random (length lst)))))


(defun scramble (lst &optional (sofar nil))
  "Scrambles a list of different elements"
  (if (null lst)
      sofar
    (let ((picked (pick lst)))
      (scramble (remove picked lst) (cons picked sofar)))))


(defun scramble* (lst)
  "Scrambles any list of objects"
  (let ((l (length lst))
        (pos nil))
    (dotimes (i l)
      (push i pos))
    (mapcar #'(lambda (x) (elt lst x)) (scramble pos))))


;;; -------------------------------------------------------------- ;;;
;;; GENERATING PRODUCTIONS
;;; -------------------------------------------------------------- ;;;

(defparameter *buffers* '(visual imaginal goal retrieval manual))
(defparameter *slots* '(slot1 slot2 slot3))
(defparameter *template-modify*
	      "(p ~A ?manual> preparation free processor free execution free ?retrieval> state free ?imaginal> state free ?goal> state free ?visual state free ?~A> =~A> =~A> ~A =X ==> =~A> ~A =X)"
	      )

(defparameter *template-create-manual*
	      "(p ~A ?~A> state free buffer full ?~A> preparation free processor free execution free =~A> ~A ~A ==> +manual> cmd punch finger index hand ~A)"
	      )

(defparameter *template-create-retrieval*
	      "(p ~A ?manual> preparation free processor free execution free ?~A> state free buffer full ?~A> state free =~A> ~A =X ==> +~A> ~A =X)"
	      )

(defun create-production-from-template (buffer-from slot-from buffer-to slot-to)
  (let ((name (format nil "~A~A-~A~A" buffer-from slot-from buffer-to slot-to)))
    (cond ((equal buffer-to 'manual)
	   (read-from-string (format nil
				      *template-create-manual*
				      name 
				      buffer-from
				      buffer-to
				      buffer-from
				      slot-from
				      'left
				      'left))
	   (read-from-string (format nil
				      *template-create-manual*
				      name 
				      buffer-from
				      buffer-to
				      buffer-from
				      slot-from
				      'right
				      'right)))
	  ((equal buffer-to 'retrieval)
	   (read-from-string (format nil
				     *template-create-retrieval*
				     name 
				     buffer-from
				     buffer-to
				     buffer-from
				     slot-from
				     buffer-to
				     slot-to)))
	  (t
	   (read-from-string (format nil
			      *template-modify*
			      name 
			      buffer-from
			      buffer-to
			      buffer-to
			      buffer-from
			      slot-from
			      buffer-to
			      slot-to))))))

    
(defun create-productions-from-template ()
  (dolist (buffer-from *buffers*)
    (dolist (slot-from *slots*)
      (dolist (buffer-to *buffers*)
	(dolist (slot-to *slots*)
	  (when (and (not (equalp buffer-to 'visual))
		     (not (equalp buffer-from 'manual))
		     (not (equalp buffer-to buffer-from)))
	    (eval (create-production-from-template buffer-from slot-from buffer-to slot-to))))))))

;;; -------------------------------------------------------------- ;;;
;;; TEST MODEL: SIMON TASK
;;; -------------------------------------------------------------- ;;;

(define-model simon-train

  (sgp :er t
       :esc t
       :ul t
       :esc 0.2
       :do-not-harvest imaginal)
  
  (chunk-type memory kind memory slot1 slot2 slot3)
  (add-dm (memory) (rule) (circle) (square) (simon)
	  (rule1 isa memory kind memory slot1 rule slot2 circle slot3 left)
	  (rule2 isa memory kind memory slot2 rule slot2 square slot3 right)
	  (congruent1 isa memory kind memory slot1 circle slot2 left slot3 black)
	  (congruent2 isa memory kind memory slot1 square slot2 right slot3 black)
	  (incongruent1 isa memory kind memory slot1 circle slot2 right slot3 black)
	  (incongruent2 isa memory kind memory slot1 square slot2 left slot3 black)
	  ;; Fillers
	  (simon-goal isa memory kind memory slot1 simon slot2 rule)
	  (imaginal-sketchpad isa memory kind memory))
  
  )


(create-productions-from-template)
(install-device '("motor" "keyboard"))

(defparameter *trial-start* 0)

(defparameter *trial-response* nil)

(defparameter *correct-response* nil)

(defparameter *trial-ended* nil)

(defparameter *responses* '((square . right)
			    (circle . left)))

(defparameter *max-trial-duration* 10)

(defun get-correct-response (chunk)
  (let ((shape (no-output (chunk-slot-value-fct chunk 'slot1))))
    (cdr (assoc shape *responses*))))

(defun process-response (model key)
  (declare (ignore model))
  (model-output "---> PROCESS RESPOOOOOONSE --->")
  (if (string-equal key "j")
      (setf *trial-response* 'right)
      (setf *trial-response* 'left))
  (schedule-event-relative 0.001 'reward-response))

(defun end-trial ()
  "Marks the end of a trial"
  (setf *trial-ended* t))

(defun reward-response ()
  (if (equal *trial-response*
	     *correct-response*)
      (trigger-reward 10)
      (trigger-reward -5))
  (schedule-event-relative 0.005 'end-trial))
      

(defun trial-end-p (num)
  "A trial ends either when a response is made or MAX-DURATION is exceeded" 
  (declare (ignore num))
  (or (> (- (mp-time) *trial-start*)
	 *max-trial-duration*)
      *trial-ended*))

(defun reset-buffers ()
  "Resets the slots of Goal and Imaginal to initial conditions"
  (mod-buffer-chunk 'imaginal '(slot1 nil slot2 nil slot3 nil))
  (mod-buffer-chunk 'goal '(slot1 simon slot2 rule slot3 nil)))
  

(add-act-r-command "process-response" 'process-response)
(add-act-r-command "trial-end?" 'trial-end-p)
(monitor-act-r-command "output-key" "process-response")

(defun run-trial ()
  "Runs a single trial with a randomly-geneated stimulus"4
  ;;; Generates a stimulus to place in thge visual buffer
  (let* ((stimulus (pick (list 'congruent1 'congruent2 'incongruent1 'incongruent2)))
	 (response (get-correct-response stimulus)))

    
    ;; Set up trial variables
    (setf *trial-start* (mp-time))
    (setf *trial-response* nil)
    (setf *correct-response* response)
    (setf *trial-ended* nil)

    (model-output "---> START TRIAL")  ;; Trace Marker

    ;; Schedule a negatiev reward if no motor response is made by MAX-DURATION.
    ;; This needs to be done right before the trial ends, otherwise no reward
    ;; will be propagated.
    (schedule-event-relative (- *max-trial-duration*
				0.01)
			     'trigger-reward
			     :module 'utility
			     :params '(-1000))
    ;;; Set up the buffers
    
    (goal-focus simon-goal)
    (set-buffer-chunk 'visual stimulus)
    (set-buffer-chunk 'imaginal 'imaginal-sketchpad)

    ;;; Run the trial
    (run-until-condition 'trial-end-p)

    ;;; REset
    (reset-buffers)))
